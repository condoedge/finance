<?php

namespace Condoedge\Finance\Models\Payable;

use App\Models\User;
use Condoedge\Finance\Billing\PaymentGatewayResolver;
use Condoedge\Finance\Casts\SafeDecimalCast;
use Condoedge\Finance\Events\BillGenerated;
use Condoedge\Finance\Facades\VendorModel;
use Condoedge\Finance\Facades\BillDetailModel;
use Condoedge\Finance\Facades\PaymentGateway;
use Condoedge\Finance\Models\AbstractMainFinanceModel;
use Condoedge\Finance\Models\Dto\Bills\CreateBillDto;
use Condoedge\Finance\Models\Dto\Bills\CreateOrUpdateBillDetail;
use Condoedge\Finance\Models\Dto\Bills\ApproveBillDto;
use Condoedge\Finance\Models\Dto\Bills\ApproveManyBillsDto;
use Condoedge\Finance\Models\Dto\Bills\UpdateBillDto;
use Condoedge\Finance\Models\BillStatusEnum;
use Condoedge\Finance\Models\BillTypeEnum;
use Condoedge\Finance\Models\PaymentTypeEnum;
use Condoedge\Finance\Models\TaxGroup;
use Condoedge\Utils\Facades\GlobalConfig;
use Illuminate\Support\Facades\DB;

/**
 * Class Bill
 * 
 * @package Condoedge\Finance\Models\Payable
 * 
 * @property int $id
 * @property BillTypeEnum $bill_type_id Foreign key to fin_bill_types
 * @property int $bill_number @TRIGGERED BY tr_bill_number_before_insert -  Auto-generated by database trigger
 * @property string $bill_reference @CALCULATED BY get_bill_reference() - Built from bill_type_id and bill_number
 * @property mixed $bill_amount_before_taxes @CALCULATED BY calculate_bill_amount() - Total amount of the bill (Without taxes)
 * @property \Condoedge\Finance\Casts\SafeDecimal $bill_total_amount @CALCULATED BY STORED GENERATED COLUMN (bill_amount_before_taxes + bill_tax_amount)
 * @property \Condoedge\Finance\Casts\SafeDecimal $bill_due_amount @CALCULATED BY calculate_bill_due() - Remaining amount to be paid
 * @property \Condoedge\Finance\Casts\SafeDecimal $bill_tax_amount @CALCULATED BY calculate_bill_tax() - Total tax amount
 * @property BillStatusEnum $bill_status_id @CALCULATED BY calculate_bill_status()
 * @property \DateTime $bill_date
 * @property \DateTime $bill_due_date
 * @property PaymentTypeEnum $payment_type_id
 * @property bool $is_draft Default: true
 * @property int|null $approved_by Foreign key to users table
 * @property \DateTime|null $approved_at
 * @property int $historical_vendor_id Foreign key to fin_historical_vendors
 * @property int $vendor_id Foreign key to fin_vendors
 * 
 * @property-read string $vendor_label The name of the vendor
 * @property-read string $bill_type_label The bill type label (Bill, Credit, etc.)
 * @property-read string $bill_status_label The bill status label (Draft, Paid, etc.)
 * @property-read float $abs_bill_total_amount The absolute value of the bill amount
 * @property-read float $abs_bill_due_amount The absolute value of the bill due amount
 * @property-read string $payment_type_label The payment type label (Cash, Credit Card, etc.)
 * 
 */
class Bill extends AbstractMainFinanceModel
{
    use \Condoedge\Utils\Models\ContactInfo\Maps\MorphManyAddresses;
    
    protected $table = 'fin_bills';

    protected $casts = [
        'bill_date' => 'date',
        'bill_due_date' => 'date',
        'bill_status_id' => BillStatusEnum::class,
        'bill_type_id' => BillTypeEnum::class,
        'payment_type_id' => PaymentTypeEnum::class,
        'approved_at' => 'datetime',
        'bill_total_amount' => SafeDecimalCast::class,
        'bill_due_amount' => SafeDecimalCast::class,
        'bill_tax_amount' => SafeDecimalCast::class,
    ];

    public function save(array $options = [])
    {
        return parent::save($options);
    }

    /**
     * Get the creation event class for this model.
     *
     * @return string
     */
    protected function getCreatedEventClass()
    {
        return BillGenerated::class;
    }

    /* RELATIONSHIPS */
    public function vendor()
    {
        return $this->belongsTo(HistoricalVendor::class, 'historical_vendor_id');
    }

    public function billDetails()
    {
        return $this->hasMany(BillDetail::class, 'bill_id');
    }

    public function billDetailsTaxes()
    {
        return $this->hasManyThrough(BillDetailTax::class, BillDetail::class, 'bill_id', 'bill_detail_id');
    }

    public function billStatus()
    {
        return $this->belongsTo(BillStatus::class, 'bill_status_id');
    }

    public function approvedBy()
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    /* ATTRIBUTES */
    public function getVendorLabelAttribute()
    {
        return $this->vendor->name;
    }

    public function getBillTypeLabelAttribute()
    {
        return $this->bill_type_id?->label();
    }

    public function getBillStatusLabelAttribute()
    {
        return $this->bill_status_id?->label();
    }

    public function getAbsBillTotalAmountAttribute()
    {
        return abs($this->bill_total_amount);
    }

    public function getAbsBillDueAmountAttribute()
    {
        return abs($this->bill_due_amount);
    }

    public function getPaymentTypeLabelAttribute()
    {
        return $this->payment_type_id?->label();
    }

    /* SCOPES */
    public function scopeForTeam($query, $teamId)
    {
        $query->whereHas('vendor', function ($query) use ($teamId) {
            $query->where('team_id', $teamId);
        });
    }

    public function scopeForVendor($query, $vendorId)
    {
        return $query->where('vendor_id', $vendorId);
    }

    public function scopePending($query)
    {
        return $query->where('bill_status_id', BillStatusEnum::PENDING);
    }

    public function scopeCanApplyOnIt($query)
    {
        return $query->pending()->where('bill_type_id', BillTypeEnum::BILL);
    }

    /* CALCULATED FIELDS */
    public function canApprove()
    {
        return $this->bill_status_id === BillStatusEnum::DRAFT;
    }

    public function isRefund()
    {
        return $this->bill_type_id->signMultiplier() < 0;
    }

    public function canBePaid()
    {
        return $this->bill_status_id->canBePaid();
    }

    public function getTaxesGrouped()
    {
        return $this->billDetailsTaxes()->groupBy('tax_id')->groupBy('bill_id')
                ->selectRaw('SUM(fin_bill_detail_taxes.tax_amount) as tax_amount, tax_id')->with('tax')->get();
    }

    public function getVisualTaxesGrouped()
    {
        return $this->getTaxesGrouped()->mapWithKeys(function ($item) {
            return [$item->tax->name => $item->tax_amount];
        });
    }

    /* ACTIONS */
    public function markApproved()
    {
        $this->is_draft = false;
        $this->approved_by = auth()->user()->id;
        $this->approved_at = now();
        $this->save();
    }

    public static function createBillFromDto(CreateBillDto $dto): self
    {
        $bill = new self();
        $bill->vendor_id = $dto->vendor_id;
        $bill->bill_type_id = $dto->bill_type_id;
        $bill->payment_type_id = $dto->payment_type_id;
        $bill->bill_date = $dto->bill_date;
        $bill->bill_due_date = $dto->bill_due_date;
        $bill->is_draft = $dto->is_draft;

        
		// This is a tool to set the context in the PaymentGatewayResolver (it needs the bill model to get details)
		PaymentGatewayResolver::setContext($bill);

		// After setting the context the resolver will return the correct payment gateway using logic behind (for now payment_type_id) 
		$bill->account_payable_id = PaymentGateway::getCashAccount()->id;

		/**
		 * @var \Condoedge\Finance\Models\Payable\Vendor $vendor
		 */
		$vendor = VendorModel::find($dto->vendor_id);

		// We decorate the bill with the vendor data preferences
		$vendor->fillBillForVendor($bill);

        $bill->save();

        foreach ($dto->billDetails as $detail) {
            BillDetailModel::createBillDetail(new CreateOrUpdateBillDetail($detail + [
                'bill_id' => $bill->id,
            ]));
        }

        return $bill->refresh();
    }

    public static function updateBillFromDto(UpdateBillDto $dto): self
    {
        $bill = self::findOrFail($dto->id);

        $bill->payment_type_id = $dto->payment_type_id;
        $bill->bill_date = $dto->bill_date;
        $bill->bill_due_date = $dto->bill_due_date;
        $bill->save();

        foreach ($dto->billDetails as $detail) {
            $id = $detail['id'] ?? null;

            $data = new CreateOrUpdateBillDetail($detail + [
                'bill_id' => $bill->id,
            ]);

            if ($id) {
                BillDetailModel::editBillDetail($data);
            } else {
                BillDetailModel::createBillDetail($data);
            }
        }

        return $bill;
    }

    public static function approveBill(ApproveBillDto $data)
    {
		BillModel::findOrFail($data->bill_id)->markApproved();
    }

    public function approveManyBills(ApproveManyBillsDto $data)
    {
        $bills = self::whereIn('id', $data->bills_ids)->get();

        foreach ($bills as $bill) {
            $bill->markApproved();
        }
    }

    public function getDefaultTaxesIds()
    {
        $taxGroupId = $this->vendor?->defaultAddress->tax_group_id ?? GlobalConfig::getOrFail('default_tax_group_id');
        $taxGroup = TaxGroup::findOrFail($taxGroupId);

        return $taxGroup->taxes()->pluck('fin_taxes.id');
    }

    /* ELEMENTS */
    public function approvalEls()
    {
        return _Flex2(
            $this->approvedByLabel()->icon('icon-check'),
            $this->approved_at ? _Flex2(
                _Html('finance-on-le')->class('font-bold'),
                _HtmlDate($this->approved_at),
            ) : null
        );
    }

    public function approvedByLabel()
    {
        return _Html('<b>'.__('finance-approved-by').'</b> '.$this->approvedBy->name);
    }


    /** INTEGRITY */
    public static function columnsIntegrityCalculations()
    {
        return [
            'bill_due_amount' => DB::raw('calculate_bill_due(fin_bills.id)'),
            'bill_amount_before_taxes' => DB::raw('calculate_bill_amount_before_taxes(fin_bills.id)'),
            'bill_tax_amount' => DB::raw('calculate_bill_tax(fin_bills.id)'),
            'bill_reference' => DB::raw('get_bill_reference(fin_bills.id)'),
            'bill_status_id' => DB::raw("calculate_bill_status(fin_bills.id, ".BillStatusEnum::PAID->value.", ".BillStatusEnum::DRAFT->value.", ".BillStatusEnum::PENDING->value.")"),
        ];
    }
}
